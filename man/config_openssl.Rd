% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/keys.R
\name{config_openssl}
\alias{config_openssl}
\title{Load openssl keys}
\usage{
config_openssl(path = NULL, private = TRUE, envelope = TRUE)
}
\arguments{
\item{path}{The path to the key.  If \code{NULL}, the environment
variables \code{USER_KEY} and \code{USER_PUBKEY} are checked,
and if they are empty then \code{~/.ssh/id_rsa} is used.  The
path can be either the full path to a public or private key, or
it can be the path to a directory containing the keypair (as
\code{id_rsa} and \code{id_rsa.pub}).}

\item{private}{A logical scalar indicating if the private key
should be loaded.  Because keypairs are often password
protected, and because public keys are useful on their own,
often it will not be needed to unlock and load the private key.}

\item{envelope}{A logical scalar indicating if the "envelope"
functions should be used.  If \code{TRUE}, then this is used for
messaging (via \code{\link{encrypt_envelope}}).  This is what
you would use to communicate with a third party using shared
public keys and non-shared private keys.  If \code{FALSE}, then
\code{\link{rsa_encrypt}} is used.  This is less useful because
it can only encrypt messages smaller than the size of the key.}
}
\description{
Load keys for use with \code{\link{encrypt}} /
\code{\link{decrypt}}, using openssl encryption.  This is in
contrast to the sodium supported keys in (e.g.,
\code{\link{config_sodium_symmetric}} as here we assume that keys
are specified as the path to files as there are standard formats
for these.
}
\examples{
\dontrun{
cfg <- config_openssl(private=FALSE)
secret <- encrypt_string("hello", NULL, cfg)
decrypt_string(secret, cfg)
}
}

